{
  "version": 3,
  "sources": ["../../../app/routes/scans.$scanId.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/scans.$scanId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/scans.$scanId.tsx\");\n  import.meta.hot.lastModified = \"1741105028185.6074\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useRevalidator } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport { getAllLinks, getBrokenLinks, getScan } from \"~/models/scan.server\";\nexport async function loader({\n  params\n}) {\n  const scan = getScan(params.scanId);\n  if (!scan) {\n    throw new Response(\"Not Found\", {\n      status: 404\n    });\n  }\n  const links = getAllLinks(scan.id);\n  const brokenLinks = getBrokenLinks(scan.id);\n  return json({\n    scan,\n    links,\n    brokenLinks\n  });\n}\nexport default function ScanResults() {\n  _s();\n  const {\n    scan,\n    links,\n    brokenLinks\n  } = useLoaderData();\n  const revalidator = useRevalidator();\n\n  // Auto-refresh while scan is running\n  useEffect(() => {\n    if (scan.status === \"running\") {\n      const timer = setInterval(() => {\n        revalidator.revalidate();\n      }, 2000);\n      return () => clearInterval(timer);\n    }\n  }, [scan.status, revalidator]);\n  return <div className=\"grid gap-4\">\n      <article>\n        <header>\n          <h2>Scan Status: {scan.status}</h2>\n        </header>\n        <div className=\"grid\">\n          <p>URL: {scan.url}</p>\n          <p>Total Links: {scan.totalLinks}</p>\n          <p>Broken Links: {scan.brokenLinks}</p>\n          {scan.completedAt && <p>\n              Completed:{\" \"}\n              {new Date(scan.completedAt).toLocaleString()}\n            </p>}\n        </div>\n      </article>\n\n      {brokenLinks.length > 0 && <article>\n          <header>\n            <h3>Broken Links</h3>\n          </header>\n          <div className=\"overflow-auto\">\n            <table>\n              <thead>\n                <tr>\n                  <th>URL</th>\n                  <th>Source Page</th>\n                  <th>Status</th>\n                  <th>Error</th>\n                </tr>\n              </thead>\n              <tbody>\n                {brokenLinks.map(link => <tr key={link.id}>\n                    <td>\n                      <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {link.url}\n                      </a>\n                    </td>\n                    <td>\n                      <a href={link.sourceUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {link.sourceUrl}\n                      </a>\n                    </td>\n                    <td>{link.statusCode}</td>\n                    <td>{link.error}</td>\n                  </tr>)}\n              </tbody>\n            </table>\n          </div>\n        </article>}\n\n      {scan.status === \"completed\" && <div className=\"grid\">\n          <a href={`/scans/${scan.id}/export`} className=\"button\" download=\"broken-links.csv\">\n            Export Results (CSV)\n          </a>\n        </div>}\n    </div>;\n}\n_s(ScanResults, \"rWi+KvUnHrLYCw4p2QlWMGcoqUc=\", false, function () {\n  return [useLoaderData, useRevalidator];\n});\n_c = ScanResults;\nvar _c;\n$RefreshReg$(_c, \"ScanResults\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAErB,IAAAA,gBAA0B;AAC1B,kBAAqD;AAuC3C;AA9DV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mCAAqC,EAAE;AAAA,EAChF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA8B;AAC9B,cAAY,IAAI,eAAe;AACjC;AAwBe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,cAAc,eAAe;AAGnC,+BAAU,MAAM;AACd,QAAI,KAAK,WAAW,WAAW;AAC7B,YAAM,QAAQ,YAAY,MAAM;AAC9B,oBAAY,WAAW;AAAA,MACzB,GAAG,GAAI;AACP,aAAO,MAAM,cAAc,KAAK;AAAA,IAClC;AAAA,EACF,GAAG,CAAC,KAAK,QAAQ,WAAW,CAAC;AAC7B,SAAO,mDAAC,SAAI,WAAU,cAClB;AAAA,uDAAC,aACC;AAAA,yDAAC,YACC,6DAAC,QAAG;AAAA;AAAA,QAAc,KAAK;AAAA,WAAvB;AAAA;AAAA;AAAA;AAAA,aAA8B,KADhC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,OAAE;AAAA;AAAA,UAAM,KAAK;AAAA,aAAd;AAAA;AAAA;AAAA;AAAA,eAAkB;AAAA,QAClB,mDAAC,OAAE;AAAA;AAAA,UAAc,KAAK;AAAA,aAAtB;AAAA;AAAA;AAAA;AAAA,eAAiC;AAAA,QACjC,mDAAC,OAAE;AAAA;AAAA,UAAe,KAAK;AAAA,aAAvB;AAAA;AAAA;AAAA;AAAA,eAAmC;AAAA,QAClC,KAAK,eAAe,mDAAC,OAAE;AAAA;AAAA,UACT;AAAA,UACV,IAAI,KAAK,KAAK,WAAW,EAAE,eAAe;AAAA,aAF1B;AAAA;AAAA;AAAA;AAAA,eAGnB;AAAA,WAPJ;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA;AAAA,IAEC,YAAY,SAAS,KAAK,mDAAC,aACxB;AAAA,yDAAC,YACC,6DAAC,QAAG,4BAAJ;AAAA;AAAA;AAAA;AAAA,aAAgB,KADlB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,iBACb,6DAAC,WACC;AAAA,2DAAC,WACC,6DAAC,QACC;AAAA,6DAAC,QAAG,mBAAJ;AAAA;AAAA;AAAA;AAAA,iBAAO;AAAA,UACP,mDAAC,QAAG,2BAAJ;AAAA;AAAA;AAAA;AAAA,iBAAe;AAAA,UACf,mDAAC,QAAG,sBAAJ;AAAA;AAAA;AAAA;AAAA,iBAAU;AAAA,UACV,mDAAC,QAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,iBAAS;AAAA,aAJX;AAAA;AAAA;AAAA;AAAA,eAKA,KANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,QACA,mDAAC,WACE,sBAAY,IAAI,UAAQ,mDAAC,QACtB;AAAA,6DAAC,QACC,6DAAC,OAAE,MAAM,KAAK,KAAK,QAAO,UAAS,KAAI,uBACpC,eAAK,OADR;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UACA,mDAAC,QACC,6DAAC,OAAE,MAAM,KAAK,WAAW,QAAO,UAAS,KAAI,uBAC1C,eAAK,aADR;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UACA,mDAAC,QAAI,eAAK,cAAV;AAAA;AAAA;AAAA;AAAA,iBAAqB;AAAA,UACrB,mDAAC,QAAI,eAAK,SAAV;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA,aAZc,KAAK,IAAd;AAAA;AAAA;AAAA;AAAA,eAavB,CAAK,KAdT;AAAA;AAAA;AAAA;AAAA,eAeA;AAAA,WAxBF;AAAA;AAAA;AAAA;AAAA,aAyBA,KA1BF;AAAA;AAAA;AAAA;AAAA,aA2BA;AAAA,SA/BuB;AAAA;AAAA;AAAA;AAAA,WAgCzB;AAAA,IAED,KAAK,WAAW,eAAe,mDAAC,SAAI,WAAU,QAC3C,6DAAC,OAAE,MAAM,UAAU,KAAK,aAAa,WAAU,UAAS,UAAS,oBAAmB,oCAApF;AAAA;AAAA;AAAA;AAAA,WAEA,KAH4B;AAAA;AAAA;AAAA;AAAA,WAI9B;AAAA,OAtDC;AAAA;AAAA;AAAA;AAAA,SAuDL;AACJ;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,eAAe,cAAc;AACvC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,aAAa;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
