{
  "version": 3,
  "sources": ["../../../app/routes/scans.$scanId.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/scans.$scanId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/scans.$scanId.tsx\");\n  import.meta.hot.lastModified = \"1741107824068.3984\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useRevalidator } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport { getAllLinks, getBrokenLinks, getScan } from \"~/models/scan.server\";\nexport async function loader({\n  params\n}) {\n  const scan = getScan(params.scanId);\n  if (!scan) {\n    throw new Response(\"Not Found\", {\n      status: 404\n    });\n  }\n  const links = getAllLinks(scan.id);\n  const brokenLinks = getBrokenLinks(scan.id);\n  return json({\n    scan,\n    links,\n    brokenLinks\n  });\n}\nexport default function ScanResults() {\n  _s();\n  const {\n    scan,\n    links,\n    brokenLinks\n  } = useLoaderData();\n  const revalidator = useRevalidator();\n\n  // Auto-refresh while scan is running\n  useEffect(() => {\n    if (scan.status === \"running\") {\n      const timer = setInterval(() => {\n        revalidator.revalidate();\n      }, 2000);\n      return () => clearInterval(timer);\n    }\n  }, [scan.status, revalidator]);\n  return <div className=\"grid gap-6\">\n      <article className=\"card\">\n        <header>\n          <h2>Scan Results</h2>\n          <p>Status: <span className={`badge ${scan.status}`}>{scan.status}</span></p>\n        </header>\n\n        <div className=\"stats-grid\">\n          <div className=\"stat-card\">\n            <h3>{scan.totalLinks}</h3>\n            <p>Total Links</p>\n          </div>\n          <div className=\"stat-card\">\n            <h3>{scan.brokenLinks}</h3>\n            <p>Broken Links</p>\n          </div>\n          <div className=\"stat-card\">\n            <h3>{scan.maxDepth}</h3>\n            <p>Max Depth</p>\n          </div>\n        </div>\n\n        <div className=\"grid\">\n          <p><strong>Website:</strong> {scan.url}</p>\n          <p><strong>Started:</strong> {new Date(scan.startedAt).toLocaleString()}</p>\n          {scan.completedAt && <p><strong>Completed:</strong> {new Date(scan.completedAt).toLocaleString()}</p>}\n        </div>\n      </article>\n\n      {scan.status === \"running\" && <article className=\"card\" role=\"alert\">\n          <div className=\"grid\">\n            <p>Scanning in progress... The results will update automatically.</p>\n            <progress></progress>\n          </div>\n        </article>}\n\n      {brokenLinks.length > 0 && <article className=\"card\">\n          <header>\n            <h3>Broken Links Found</h3>\n            <p>We found {brokenLinks.length} broken links on your website</p>\n          </header>\n\n          <div className=\"overflow-auto\">\n            <table role=\"grid\">\n              <thead>\n                <tr>\n                  <th>Broken Link</th>\n                  <th>Source Page</th>\n                  <th>Status</th>\n                  <th>Error</th>\n                </tr>\n              </thead>\n              <tbody>\n                {brokenLinks.map(link => <tr key={link.id}>\n                    <td>\n                      <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"link\">\n                        {link.url}\n                      </a>\n                    </td>\n                    <td>\n                      <a href={link.sourceUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"link\">\n                        {link.sourceUrl}\n                      </a>\n                    </td>\n                    <td>\n                      <span className=\"badge error\">\n                        {link.statusCode || \"Error\"}\n                      </span>\n                    </td>\n                    <td>{link.error || \"HTTP \" + link.statusCode}</td>\n                  </tr>)}\n              </tbody>\n            </table>\n          </div>\n        </article>}\n\n      <div className=\"button-group\">\n        <a href=\"/\" role=\"button\" className=\"secondary\">\n          New Scan\n        </a>\n        {scan.status === \"completed\" && brokenLinks.length > 0 && <a href={`/scans/${scan.id}/export`} role=\"button\" download=\"broken-links.csv\">\n            Export Results (CSV)\n          </a>}\n      </div>\n\n      <style>\n        {`\n          .badge {\n            display: inline-block;\n            padding: 0.25rem 0.5rem;\n            border-radius: 999px;\n            font-size: 0.875rem;\n            font-weight: 500;\n            text-transform: capitalize;\n          }\n          .badge.running {\n            background: var(--primary);\n            color: white;\n          }\n          .badge.completed {\n            background: var(--form-element-valid-border-color);\n            color: white;\n          }\n          .badge.error {\n            background: var(--form-element-invalid-border-color);\n            color: white;\n          }\n          .badge.pending {\n            background: var(--muted-border-color);\n            color: var(--muted-color);\n          }\n          .link {\n            color: var(--primary);\n            text-decoration: none;\n            word-break: break-all;\n          }\n          .link:hover {\n            text-decoration: underline;\n          }\n        `}\n      </style>\n    </div>;\n}\n_s(ScanResults, \"rWi+KvUnHrLYCw4p2QlWMGcoqUc=\", false, function () {\n  return [useLoaderData, useRevalidator];\n});\n_c = ScanResults;\nvar _c;\n$RefreshReg$(_c, \"ScanResults\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
